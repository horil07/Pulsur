import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

// Simple admin check
const isAdmin = (email: string) => {
  return email === 'testuser@example.com' || email.includes('admin')
}

interface ChallengeData {
  id: string
  title: string
  description: string
  image: string
  topPrize: string
  status: 'DRAFT' | 'OPEN' | 'CLOSED' | 'ANNOUNCED' | 'WINNERS_ANNOUNCED'
  participants: number
  startDate: string
  endDate: string
  winnersAnnouncedDate?: string
  category: string
  assignment: string
  prizing: string[]
  objective: string
  deliverables: string[]
  attachments: string[]
  createdAt: string
}

// Mock challenge data - in production this would come from a database
const challenges: ChallengeData[] = [
  {
    id: '1',
    title: 'Digital Dreams',
    description: 'Create stunning digital artwork that captures the essence of cyberpunk aesthetics',
    image: 'https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400',
    topPrize: '$2,500',
    status: 'OPEN',
    participants: 234,
    startDate: '2024-11-01',
    endDate: '2024-12-31',
    category: 'AI Artwork',
    assignment: 'Create stunning digital artwork that captures the essence of cyberpunk aesthetics with a holiday twist',
    prizing: ['1st Place: $2,500', '2nd Place: $1,000', '3rd Place: $500'],
    objective: 'Showcase creative AI artwork capabilities',
    deliverables: ['High-res digital artwork', 'Creative description'],
    attachments: ['Style Guide PDF'],
    createdAt: '2024-11-01T10:00:00Z'
  },
  {
    id: '2',
    title: 'Neon Synthwave',
    description: 'Compose original synthwave music with AI assistance',
    image: 'https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=400',
    topPrize: '$1,800',
    status: 'OPEN',
    participants: 156,
    startDate: '2024-10-15',
    endDate: '2024-12-25',
    category: 'AI Music',
    assignment: 'Create an original synthwave track that captures the nostalgic feel of the 80s',
    prizing: ['1st Place: $1,800', '2nd Place: $900', '3rd Place: $300'],
    objective: 'Produce high-quality synthwave compositions',
    deliverables: ['Complete track (3+ minutes)', 'Audio file (WAV/FLAC)'],
    attachments: ['Music Style Guide'],
    createdAt: '2024-10-15T14:00:00Z'
  },
  {
    id: '3',
    title: 'Future Visions',
    description: 'Design concepts for the future of technology and society',
    image: 'https://images.unsplash.com/photo-1451187580459-43490279c0fa?w=400',
    topPrize: '$3,000',
    status: 'ANNOUNCED',
    participants: 0,
    startDate: '2024-12-20',
    endDate: '2025-01-15',
    category: 'Design',
    assignment: 'Design conceptual artwork for future technology and society',
    prizing: ['1st Place: $3,000', '2nd Place: $1,500', '3rd Place: $750'],
    objective: 'Conceptual design work',
    deliverables: ['Design mockups', 'Concept explanation'],
    attachments: ['Design Brief'],
    createdAt: '2024-11-20T12:00:00Z'
  },
  {
    id: '4',
    title: 'Retro Gaming',
    description: 'Create pixel art inspired by classic video games',
    image: 'https://images.unsplash.com/photo-1542751371-adc38448a05e?w=400',
    topPrize: '$1,200',
    status: 'CLOSED',
    participants: 89,
    endDate: '2024-11-30',
    category: 'Pixel Art',
    startDate: '2024-10-01',
  },
  {
    id: '5',
    title: 'AI Poetry',
    description: 'Generate beautiful poetry using AI language models',
    image: 'https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=400',
    topPrize: '$800',
    status: 'OPEN',
    participants: 167,
    endDate: '2024-12-20',
    category: 'AI Writing',
    startDate: '2024-11-10',
    requirements: [
      'AI-generated poetry',
      'Minimum 10 lines',
      'Original content only'
    ]
  },
  {
    id: '6',
    title: 'Cyberpunk Chronicles',
    description: 'Write short stories set in a cyberpunk universe',
    image: 'https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400',
    topPrize: '$1,500',
    status: 'ANNOUNCED',
    participants: 0,
    endDate: '2025-02-01',
    category: 'Writing',
    startDate: '2025-01-01',
    requirements: [
      'Cyberpunk setting',
      '1000-5000 words',
      'Original story'
    ]
  }
]

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url)
    const status = searchParams.get('status')
    const search = searchParams.get('search')
    const category = searchParams.get('category')
    
    let filteredChallenges = challenges

    // Filter by status
    if (status && status !== 'ALL') {
      filteredChallenges = filteredChallenges.filter(challenge => 
        challenge.status === status
      )
    }

    // Filter by search term
    if (search) {
      const searchLower = search.toLowerCase()
      filteredChallenges = filteredChallenges.filter(challenge =>
        challenge.title.toLowerCase().includes(searchLower) ||
        challenge.description.toLowerCase().includes(searchLower) ||
        challenge.category.toLowerCase().includes(searchLower)
      )
    }

    // Filter by category
    if (category) {
      filteredChallenges = filteredChallenges.filter(challenge =>
        challenge.category === category
      )
    }

    return NextResponse.json({
      success: true,
      challenges: filteredChallenges,
      total: filteredChallenges.length
    })
  } catch (error) {
    console.error('Failed to fetch challenges:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to fetch challenges' },
      { status: 500 }
    )
  }
}

// Get single challenge by ID
export async function POST(request: Request) {
  try {
    const { id } = await request.json()
    
    // Enhanced challenge data for detail view
    const challengeDetails: { [key: string]: any } = {
      '1': {
        ...challenges.find(c => c.id === '1'),
        assignment: 'We are challenging Legioners to create their very best content centered around four major holidays: Valentine\'s Day, St. Patrick\'s Day, National Tortilla Chip Day, or April Fools. Think you got what it takes? Submit your holiday content featuring DORITOS for a chance to win $1,500 and the ultimate holiday bragging rights.',
        prizing: [
          '1st Place: $1,500 + Ultimate Holiday Bragging Rights',
          '2nd Place: $750 + Holiday Recognition Package', 
          '3rd Place: $250 + Special Mention'
        ],
        objective: 'Create engaging holiday-themed content that showcases DORITOS products in a creative and authentic way.',
        deliverables: [
          'Original digital artwork or design',
          'High-resolution files (minimum 1920x1080)',
          'Brief description of creative concept',
          'Usage rights granted to DORITOS'
        ],
        attachments: [
          'Brand Guidelines PDF',
          'Color Palette Swatches', 
          'Logo Assets Package'
        ],
        winners: [
          {
            id: 'w1',
            name: 'ROBERTO',
            avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100',
            place: 1,
            likes: 1,
            submissionImage: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400',
            submissionTitle: 'Neon Holiday Dreams'
          },
          {
            id: 'w2', 
            name: 'SPICYDARREN',
            avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100',
            place: 2,
            likes: 0,
            submissionImage: 'https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=400',
            submissionTitle: 'Cyber Chips Celebration'
          },
          {
            id: 'w3',
            name: 'TRICK', 
            avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b77c?w=100',
            place: 3,
            likes: 1,
            submissionImage: 'https://images.unsplash.com/photo-1542751371-adc38448a05e?w=400',
            submissionTitle: 'Retro Holiday Vibes'
          }
        ]
      }
    }
    
    const challenge = challengeDetails[id] || challenges.find(c => c.id === id)
    
    if (!challenge) {
      return NextResponse.json(
        { success: false, error: 'Challenge not found' },
        { status: 404 }
      )
    }

    return NextResponse.json({
      success: true,
      challenge
    })
  } catch (error) {
    console.error('Failed to fetch challenge:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to fetch challenge' },
      { status: 500 }
    )
  }
}

// POST - Create new challenge (Admin only)
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.email || !isAdmin(session.user.email)) {
      return NextResponse.json(
        { success: false, error: 'Admin access required' },
        { status: 403 }
      )
    }

    const challengeData = await request.json()
    
    // Validation
    if (!challengeData.title || !challengeData.description || !challengeData.topPrize) {
      return NextResponse.json(
        { success: false, error: 'Missing required fields' },
        { status: 400 }
      )
    }

    const newChallenge = {
      id: Date.now().toString(),
      ...challengeData,
      participants: 0,
      createdAt: new Date().toISOString(),
      prizing: challengeData.prizing?.filter((p: string) => p.trim() !== '') || [],
      deliverables: challengeData.deliverables?.filter((d: string) => d.trim() !== '') || [],
      attachments: challengeData.attachments?.filter((a: string) => a.trim() !== '') || []
    }

    // In production, this would save to database
    challenges.unshift(newChallenge)

    return NextResponse.json({
      success: true,
      challenge: newChallenge
    })
  } catch (error) {
    console.error('Failed to create challenge:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to create challenge' },
      { status: 500 }
    )
  }
}

// PATCH - Update existing challenge (Admin only)
export async function PATCH(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.email || !isAdmin(session.user.email)) {
      return NextResponse.json(
        { success: false, error: 'Admin access required' },
        { status: 403 }
      )
    }

    const { id, ...updateData } = await request.json()
    
    if (!id) {
      return NextResponse.json(
        { success: false, error: 'Challenge ID required' },
        { status: 400 }
      )
    }

    const challengeIndex = challenges.findIndex(c => c.id === id)
    
    if (challengeIndex === -1) {
      return NextResponse.json(
        { success: false, error: 'Challenge not found' },
        { status: 404 }
      )
    }

    // Update challenge
    challenges[challengeIndex] = {
      ...challenges[challengeIndex],
      ...updateData,
      prizing: updateData.prizing?.filter((p: string) => p.trim() !== '') || challenges[challengeIndex].prizing,
      deliverables: updateData.deliverables?.filter((d: string) => d.trim() !== '') || challenges[challengeIndex].deliverables,
      attachments: updateData.attachments?.filter((a: string) => a.trim() !== '') || challenges[challengeIndex].attachments
    }

    return NextResponse.json({
      success: true,
      challenge: challenges[challengeIndex]
    })
  } catch (error) {
    console.error('Failed to update challenge:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to update challenge' },
      { status: 500 }
    )
  }
}

// DELETE - Delete challenge (Admin only)
export async function DELETE(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.email || !isAdmin(session.user.email)) {
      return NextResponse.json(
        { success: false, error: 'Admin access required' },
        { status: 403 }
      )
    }

    const { searchParams } = new URL(request.url)
    const id = searchParams.get('id')
    
    if (!id) {
      return NextResponse.json(
        { success: false, error: 'Challenge ID required' },
        { status: 400 }
      )
    }

    const challengeIndex = challenges.findIndex(c => c.id === id)
    
    if (challengeIndex === -1) {
      return NextResponse.json(
        { success: false, error: 'Challenge not found' },
        { status: 404 }
      )
    }

    // Remove challenge
    const deletedChallenge = challenges.splice(challengeIndex, 1)[0]

    return NextResponse.json({
      success: true,
      challenge: deletedChallenge
    })
  } catch (error) {
    console.error('Failed to delete challenge:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to delete challenge' },
      { status: 500 }
    )
  }
}
